Spring Boot日志管理 
1、默认的日志配置
    示例：2017-07-19 07:54:56.353  INFO 25596 --- [           main] com.springboot.learning.Application      : Started Application in 5.556 seconds (JVM running for 5.859)
    内容元素：
             时间日期 — 精确到毫秒
             日志级别 — ERROR, WARN, INFO, DEBUG or TRACE
             进程ID
             分隔符 — --- 标识实际日志的开始
             线程名 — 方括号括起来（可能会截断控制台输出）
    Logger名 — 通常使用源代码的类名
             日志内容
    在Spring Boot中默认配置了ERROR、WARN和INFO级别的日志输出到控制台。
    我们可以通过两种方式切换至DEBUG级别：
        在运行命令后加入--debug标志，如：$ java -jar myapp.jar --debug
        在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。
    配置多彩输出：
        通过在application.properties中设置spring.output.ansi.enabled参数来支持
            NEVER：禁用ANSI-colored输出（默认项）
            DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
            ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用
 文件输出:
 	Spring Boot默认配置只会输出到控制台，并不会记录到文件中,如果需要输出到文件，需要在application.properties文件中配置logging.file或logging.path属性。
 	logging.file，设置文件，可以是绝对路径，也可以是相对路径（相对路径时会在该工程下创建）。如：logging.file=my.log
	logging.path，设置目录，会在该目录下创建spring.log（logging.file未指定的时候）文件，并写入日志内容，如：logging.path=/var/log（相对路径时会在根目录下创建这里是D盘）
 	
自定义日志配置：（配置在application.properties同级目录）
	由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。

	根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：

	Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
	Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
	Log4j2：log4j2-spring.xml, log4j2.xml
	JDK (Java Util Logging)：logging.properties
	Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml）