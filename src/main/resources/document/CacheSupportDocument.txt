随着时间的积累，应用的使用用户不断增加，数据规模也越来越大，往往数据库查询操作会成为影响用户使用体验的瓶颈，此时使用缓存往往是解决这一问题非常好的手段之一
先在日志配置文件中修改下显示数据库查询语句
<root level="${app.log.level:-DEBUG}"> 这里改为debug 就可以了，不过这样一来会将所有日志都打印出来，不方便查看
所以在日志配置文件上加上
	<logger name="org.springframework" level="INFO" />
	<logger name="springfox.documentation" level="INFO" />
	<logger name="org.hibernate" level="WARN" />
	<logger name="org.mybatis" level="INFO" />
上面这些也只是根据自己的需求添加了，使得相应包下打印的日志级别提高，不是用debug级别，这样一来会少很多干扰的日志输出。
在未使用缓存时，即使是同样的查询语句连着查询每次都会去访问数据库，通过控制台的sql语句来确定。
参考测试用例：CacheSupportTest 

通过使用缓存，可以将查询结果存入缓存中，第二次相同的查询时结果可以直接从缓存中获取。
要在Application类中添加@EnableCaching ,并且添加上ehcache.xml配置文件，和在CityMapper中添加上相应的注解，这里只是为了实现功能所以直接使用了以前的代码，没在重新开发。

Cache注解详解
回过头来我们再来看，这里使用到的两个注解分别作了什么事情。

@CacheConfig：主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig：配置了该数据访问对象中返回的内容将存储于名为xxx的缓存对象中，
我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义。

@Cacheable(cacheNames = "cityMapperFindName")：配置了findByName函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：

value、cacheNames：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了
key：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = "#p0")：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考官方文档
condition：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = "#p0", condition = "#p0.length() < 3")，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。
unless：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。
keyGenerator：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定。需要注意的是：该参数与key是互斥的
cacheManager：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用
cacheResolver：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定。

@Autowired
private CacheManager cacheManager;
通过这个debug调试可以知道正在使用的缓存是哪个类实例化的

虽然EhCache已经能够适用很多应用场景，但是由于EhCache是进程内的缓存框架，在集群模式下时，各应用服务器之间的缓存都是独立的，因此在不同服务器的进程间会存在缓存不一致的情况。即使EhCache提供了集群环境下的缓存同步策略，但是同步依然需要一定的时间，短暂的缓存不一致依然存在。

在一些要求高一致性（任何数据变化都能及时的被查询到）的系统和应用中，就不能再使用EhCache来解决了，这个时候使用集中式缓存是个不错的选择，因此本文将介绍如何在Spring Boot的缓存支持中使用Redis进行数据缓存。
启动redis 参考RedisSupportDocument.txt配置，并将pom文件中关于EhCache的依赖去掉，即可其它都可以不用改，ehcache.xml文件将不会起作用，可以不用删。（删了也没关系）

特别注意点：
在EhCache缓存时没有问题，主要是由于EhCache是进程内的缓存框架，第一次通过select查询出的结果被加入到EhCache缓存中，第二次查询从EhCache取出的对象与第一次查询对象实际上是同一个对象，因此我们在更新age的时候，实际已经更新了EhCache中的缓存对象。
而Redis的缓存独立存在于我们的Spring应用之外，我们对数据库中数据做了更新操作之后，没有通知Redis去更新相应的内容，因此我们取到了缓存中未修改的数据，导致了数据库与缓存中数据的不一致。
解决办法：我们只需要在更新age的时候，通过@CachePut来让数据更新操作同步到缓存中
参考CityMapper 中的@CachePut的使用
